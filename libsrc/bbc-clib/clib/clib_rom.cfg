MEMORY {
    ZP:  start = $0070, size = $0020, type = rw, define = yes;
    ROM: start = $8000, size = $3800, type = ro, file=%O, fill=yes;
    VEC: start = $B800, size = $0800, type = ro, file=%O, fill=yes;
    RAM: start = $0400, size = $0400, type = rw;
}
SEGMENTS {
    ROMHEADER:load = ROM, type = ro;
    CODE:     load = ROM, type = ro;
    RODATA:   load = ROM, type = ro;
    INIT:     load = ROM, type = ro;
    STARTUP:  load = ROM, type = ro;
    DATA:     load = ROM, run = RAM, type = ro, define = yes;
    VECTORS:  load = VEC, type = ro;
    BSS:      load = RAM, type = bss, define = yes;
#    HEAP:     load = RAM, type = bss, optional = yes; # must sit just below stack
    ZEROPAGE: load = ZP,  type = zp;
}
FEATURES {
    CONDES: segment = INIT,
	    type = constructor,
	    label = __CONSTRUCTOR_TABLE__,
	    count = __CONSTRUCTOR_COUNT__;
    CONDES: segment = RODATA,
	    type = destructor,
	    label = __DESTRUCTOR_TABLE__,
	    count = __DESTRUCTOR_COUNT__;
    CONDES: type = interruptor,
	    segment = RODATA,
	    label = __INTERRUPTOR_TABLE__,
	    count = __INTERRUPTOR_COUNT__;
}
SYMBOLS {
    __STACKSIZE__ = $800;	# 2K stack
}


